application 

using Application.Classes;
using DataLayer.Classes;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.HttpOverrides;
using System.Text;
using DomainClasses.Context;
using Microsoft.EntityFrameworkCore;
using DomainClasses.Entities;
using Microsoft.AspNetCore.Identity;
using DataLayer.Cookies;
using Microsoft.AspNetCore.Authentication.Cookies;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddCors();
builder.Services.AddHttpContextAccessor();


builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(o => o.LoginPath = new PathString("/Account/login"));

//builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);


builder.Services.AddSession(options => {
    options.IdleTimeout = TimeSpan.FromMinutes(60);
});
builder.Services.AddDistributedMemoryCache();
//builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

//builder.Services.AddHttpContextAccessor();
builder.Services.AddTransient<IUserService, UserService>();
//builder.Services.AddIdentity<ApplicationUser, IdentityRole<Guid>>(
//    options =>
//    {

//        options.Password.RequireLowercase = false;
//        options.Password.RequireUppercase = false;
//        options.Password.RequireDigit = false;
//        options.Password.RequiredLength = 4;
//        options.Password.RequireNonAlphanumeric = false;

//    }
//    )
//.AddEntityFrameworkStores<ApplicationDbContext>();
#region Jwt

//var JwtSettingSection = builder.Configuration.GetSection("JWTSettings");
//builder.Services.Configure<JWTSettings>(JwtSettingSection);

//var jwtsetting = JwtSettingSection.Get<JWTSettings>();
//var key = Encoding.ASCII.GetBytes(jwtsetting.Secret);

//builder.Services.AddAuthentication(a =>
//{
//    a.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
//}).AddJwtBearer(option =>
//{
//    option.TokenValidationParameters = new TokenValidationParameters
//    {
//        IssuerSigningKey = new SymmetricSecurityKey(key),
//        ValidateIssuerSigningKey = true,
//        ValidIssuer = jwtsetting.Issure,
//        ValidateIssuer = true,
//        ValidAudience = jwtsetting.Audience,
//        ValidateAudience = true,
//        ValidateLifetime = true

//    };
//});

//builder.Services.AddDbContext<ApplicationDbContext>();



#endregion
var app = builder.Build();
app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor
});
// Configure the HTTP request pipeline.

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

//using var scope = app.Services.CreateScope();
//var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
//dbContext.Database.Migrate();

app.MapControllers();
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();




--------

userlayer



using DomainClasses.Entities;
using DomainClasses.Context;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using System;
using Microsoft.AspNetCore.Authentication.Cookies;
using DataLayer.Cookies;
using Microsoft.AspNetCore.Http.Features;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(o => o.LoginPath = new PathString("/Account/login"));

builder.Services.AddSession(options => {
    options.IdleTimeout = TimeSpan.FromMinutes(60);
});


builder.Services.AddCors(o => o.AddPolicy("AllowAllOrigins", builder =>
{
    builder.AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader();


}));

builder.Services.Configure<FormOptions>(options =>
{
    options.ValueCountLimit = int.MaxValue;
    options.BufferBodyLengthLimit = Int64.MaxValue;
    options.ValueLengthLimit = int.MaxValue;
    options.KeyLengthLimit = int.MaxValue;
});




builder.Services.AddHttpContextAccessor();

//builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

//builder.Services.AddHttpContextAccessor();
builder.Services.AddTransient<IUserService, UserService>();

builder.Services.AddDistributedMemoryCache();



builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<ApplicationDbContext>();
builder.Services.AddCors();


//builder.Services.AddIdentity<ApplicationUser, IdentityRole<Guid>>(
//    options =>
//    {

//        options.Password.RequireLowercase = false;
//        options.Password.RequireUppercase = false;
//        options.Password.RequireDigit = false;
//        options.Password.RequiredLength = 4;
//        options.Password.RequireNonAlphanumeric = false;

//    }
//    )
//.AddEntityFrameworkStores<ApplicationDbContext>();
var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
}

using var scope = app.Services.CreateScope();
var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
dbContext.Database.Migrate();



app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.UseCors("AllowAllOrigins");

app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.UseSession();

app.MapFallbackToFile("index.html");
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();


==================


[HttpPost, Route("Login")]
    public ResultClass<Boolean> Login(LoginViewModel VM)
    {
        string returnUrl = "";

        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();

            var user = VM.Login();

            Res.Result = user != null; 
            if (Res.Result)
            {
                var claims = new List<Claim>
                        {
                            new Claim(ClaimTypes.Name, user.User_ID.ToString()),
                            new Claim("FullUserName", user.User_FullName),
                            new Claim(ClaimTypes.Role, "Administrator"),
                        };

                var claimsIdentity = new ClaimsIdentity(
                    claims, CookieAuthenticationDefaults.AuthenticationScheme);

                var authProperties = new AuthenticationProperties
                {
                    //AllowRefresh = <bool>,
                    // Refreshing the authentication session should be allowed.

                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(60),
                    // The time at which the authentication ticket expires. A 
                    // value set here overrides the ExpireTimeSpan option of 
                    // CookieAuthenticationOptions set with AddCookie.

                    //IsPersistent = true,
                    // Whether the authentication session is persisted across 
                    // multiple requests. When used with cookies, controls
                    // whether the cookie's lifetime is absolute (matching the
                    // lifetime of the authentication ticket) or session-based.

                    //IssuedUtc = <DateTimeOffset>,
                    // The time at which the authentication ticket was issued.

                    RedirectUri = returnUrl
                    // The full path or absolute URI to be used as an http 
                    // redirect response value.
                };


                HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity),
                    authProperties);


                Res.SetDefualtSuccessSystem();
            }
            else
            {
                Res.Errors.Add("not found");
            }


            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }
