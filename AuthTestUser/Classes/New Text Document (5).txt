application 

using Application.Classes;
using DataLayer.Classes;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.HttpOverrides;
using System.Text;
using DomainClasses.Context;
using Microsoft.EntityFrameworkCore;
using DomainClasses.Entities;
using Microsoft.AspNetCore.Identity;
using DataLayer.Cookies;
using Microsoft.AspNetCore.Authentication.Cookies;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddCors();
builder.Services.AddHttpContextAccessor();


builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(o => o.LoginPath = new PathString("/Account/login"));

//builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);


builder.Services.AddSession(options => {
    options.IdleTimeout = TimeSpan.FromMinutes(60);
});
builder.Services.AddDistributedMemoryCache();
//builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

//builder.Services.AddHttpContextAccessor();
builder.Services.AddTransient<IUserService, UserService>();
//builder.Services.AddIdentity<ApplicationUser, IdentityRole<Guid>>(
//    options =>
//    {

//        options.Password.RequireLowercase = false;
//        options.Password.RequireUppercase = false;
//        options.Password.RequireDigit = false;
//        options.Password.RequiredLength = 4;
//        options.Password.RequireNonAlphanumeric = false;

//    }
//    )
//.AddEntityFrameworkStores<ApplicationDbContext>();
#region Jwt

//var JwtSettingSection = builder.Configuration.GetSection("JWTSettings");
//builder.Services.Configure<JWTSettings>(JwtSettingSection);

//var jwtsetting = JwtSettingSection.Get<JWTSettings>();
//var key = Encoding.ASCII.GetBytes(jwtsetting.Secret);

//builder.Services.AddAuthentication(a =>
//{
//    a.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
//}).AddJwtBearer(option =>
//{
//    option.TokenValidationParameters = new TokenValidationParameters
//    {
//        IssuerSigningKey = new SymmetricSecurityKey(key),
//        ValidateIssuerSigningKey = true,
//        ValidIssuer = jwtsetting.Issure,
//        ValidateIssuer = true,
//        ValidAudience = jwtsetting.Audience,
//        ValidateAudience = true,
//        ValidateLifetime = true

//    };
//});

//builder.Services.AddDbContext<ApplicationDbContext>();



#endregion
var app = builder.Build();
app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor
});
// Configure the HTTP request pipeline.

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

//using var scope = app.Services.CreateScope();
//var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
//dbContext.Database.Migrate();

app.MapControllers();
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();




--------

userlayer



using DomainClasses.Entities;
using DomainClasses.Context;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using System;
using Microsoft.AspNetCore.Authentication.Cookies;
using DataLayer.Cookies;
using Microsoft.AspNetCore.Http.Features;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(o => o.LoginPath = new PathString("/Account/login"));

builder.Services.AddSession(options => {
    options.IdleTimeout = TimeSpan.FromMinutes(60);
});


builder.Services.AddCors(o => o.AddPolicy("AllowAllOrigins", builder =>
{
    builder.AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader();


}));

builder.Services.Configure<FormOptions>(options =>
{
    options.ValueCountLimit = int.MaxValue;
    options.BufferBodyLengthLimit = Int64.MaxValue;
    options.ValueLengthLimit = int.MaxValue;
    options.KeyLengthLimit = int.MaxValue;
});




builder.Services.AddHttpContextAccessor();

//builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

//builder.Services.AddHttpContextAccessor();
builder.Services.AddTransient<IUserService, UserService>();

builder.Services.AddDistributedMemoryCache();



builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<ApplicationDbContext>();
builder.Services.AddCors();


//builder.Services.AddIdentity<ApplicationUser, IdentityRole<Guid>>(
//    options =>
//    {

//        options.Password.RequireLowercase = false;
//        options.Password.RequireUppercase = false;
//        options.Password.RequireDigit = false;
//        options.Password.RequiredLength = 4;
//        options.Password.RequireNonAlphanumeric = false;

//    }
//    )
//.AddEntityFrameworkStores<ApplicationDbContext>();
var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
}

using var scope = app.Services.CreateScope();
var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
dbContext.Database.Migrate();



app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.UseCors("AllowAllOrigins");

app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.UseSession();

app.MapFallbackToFile("index.html");
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();


==================


[HttpPost, Route("Login")]
    public ResultClass<Boolean> Login(LoginViewModel VM)
    {
        string returnUrl = "";

        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();

            var user = VM.Login();

            Res.Result = user != null; 
            if (Res.Result)
            {
                var claims = new List<Claim>
                        {
                            new Claim(ClaimTypes.Name, user.User_ID.ToString()),
                            new Claim("FullUserName", user.User_FullName),
                            new Claim(ClaimTypes.Role, "Administrator"),
                        };

                var claimsIdentity = new ClaimsIdentity(
                    claims, CookieAuthenticationDefaults.AuthenticationScheme);

                var authProperties = new AuthenticationProperties
                {
                    //AllowRefresh = <bool>,
                    // Refreshing the authentication session should be allowed.

                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(60),
                    // The time at which the authentication ticket expires. A 
                    // value set here overrides the ExpireTimeSpan option of 
                    // CookieAuthenticationOptions set with AddCookie.

                    //IsPersistent = true,
                    // Whether the authentication session is persisted across 
                    // multiple requests. When used with cookies, controls
                    // whether the cookie's lifetime is absolute (matching the
                    // lifetime of the authentication ticket) or session-based.

                    //IssuedUtc = <DateTimeOffset>,
                    // The time at which the authentication ticket was issued.

                    RedirectUri = returnUrl
                    // The full path or absolute URI to be used as an http 
                    // redirect response value.
                };


                HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity),
                    authProperties);


                Res.SetDefualtSuccessSystem();
            }
            else
            {
                Res.Errors.Add("not found");
            }


            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }



    14020725\1255------------------------------

    'Object reference not set to an instance of an object.'


    RostaTypeEnum?  a = personGHRostaRepository.GetAll().Where(x => x.PersonGH_ID == PersonGHID).Include(x => x.Rosta_Tbl).Where(x => x.RostaType == RostaTypeEnum.KhanehBehdasht).FirstOrDefault().RostaType;


    --------------------------------------------

     [HttpGet, Route("Search")]
        public ResultClass<List<PersonGHClass>> Search(Guid Markaz_ID, MonthEnum Month, int Year_Year, VersionEnum VersionEnum, Guid Person_ID)
        {


            try
            {
                PersonGHViewModel personGHViewModel = new PersonGHViewModel();
                var obj = personGHViewModel.Search(Markaz_ID, Month, Year_Year, VersionEnum, Person_ID);

                return obj;
            }
            catch (Exception Ex)
            {
                ResultClass<List<PersonGHClass>> resultClass = new ResultClass<List<PersonGHClass>>();
                resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

                return resultClass;
            }

        }


        ------------------------------------------------------

        14020726***********************


        using System.Collections.Generic;
using Application.Classes;
using Application.ViewModels.Enumv;
using DataLayer.Repository;
using DomainClasses.Context;
using DomainClasses.Enums;

namespace Application.ViewModels.PersonGH
{


    public class PersonGHMororViewModel
    {
        public enum ObjectTypeEnum
        {
            person = 1,
            Year = 2,
            Month = 3,
            Version = 4,
            City = 5,
            Markaz = 6,
            PersonType = 7,
            PersonTypeGroup = 8,
            Amel = 9
        }

        public class PersonGHMororClass
        {
            public Guid? PersonGH_ID { get; set; }
            public Guid? Person_ID { get; set; }

            public string PersonName { get; set; }

            public int? Year { get; set; }

            public MonthEnum? Month { get; set; }

            public string MonthName { get; set; }

            public Guid? City_ID { get; set; }

            public string CityName { get; set; }

            public Guid? Markaz_ID { get; set; }

            public string MarkazName { get; set; }

            public PersonTypeEnum? PersonType { get; set; }

            public string PersonTypeName { get; set; }

            public PersonTypeGroupEnum? PersonTypeGroup { get; set; }

            public string PersonTypeGroupName { get; set; }

            public VersionEnum Version { get; set; }
            public string VersionName { get; set; }

            public AmelEnum? AmelEnum { get; set; }

            public string AmelEnumName { get; set; }

            public decimal? Price { get; set; }

            public int? Count { get; set; }

            public Boolean ischecked { get; set; }

        }

        public class CondClass
        {
            public string ID { get; set; }

            public ObjectTypeEnum objectType { get; set; }
        }

        public List<CondClass> Conds { get; set; }

        public ObjectTypeEnum SelectedObjectType { get; set; }

        public PaymentTypeEnum PaymentType { get; set; }
        public int? PageNumber { get; set; } = 1;
        public int? PageSize { get; set; } = 10;
        public Boolean isSortAsce { get; set; }

        public PersonGHMororViewModel()
        {
            Conds = new List<CondClass>();
        }
        public void New()
        {
            PageNumber  = 1 ;
            PageSize =10 ;
        }
        public ResultClass<List<PersonGHMororClass>> GetList()
        {
            ResultClass<List<PersonGHMororClass>> resultClass = new ResultClass<List<PersonGHMororClass>>();
            resultClass.Result = new List<PersonGHMororClass>();

            List<PersonGHMororClass> Res = new List<PersonGHMororClass>();

            ApplicationDbContext applicationDbContext = new ApplicationDbContext();


            PersonGHAmelRepository personGHAmelRepository = new PersonGHAmelRepository(applicationDbContext);
            var Query = personGHAmelRepository.GetAll().Where(x => x.PaymentType == PaymentType && x.PersonGHAmel_Value != null);

            var PersonIDs = Conds.Where(x => x.objectType == ObjectTypeEnum.person).Select(x => Guid.Parse(x.ID)).ToList();
            var CityIDs = Conds.Where(x => x.objectType == ObjectTypeEnum.City).Select(x => Guid.Parse(x.ID)).ToList();
            var MarkazIDs = Conds.Where(x => x.objectType == ObjectTypeEnum.Markaz).Select(x => Guid.Parse(x.ID)).ToList();
            var amelen = Conds.Where(x => x.objectType == ObjectTypeEnum.Amel).Select(x => int.Parse(x.ID)).ToList();
            var persontypegroup = Conds.Where(x => x.objectType == ObjectTypeEnum.PersonTypeGroup).Select(x => int.Parse(x.ID)).ToList();
            var PersonTypes = Conds.Where(x => x.objectType == ObjectTypeEnum.PersonType).Select(x => int.Parse(x.ID)).ToList();
            var month = Conds.Where(x => x.objectType == ObjectTypeEnum.Month).Select(x => int.Parse(x.ID)).ToList();
            var year = Conds.Where(x => x.objectType == ObjectTypeEnum.Year).Select(x => int.Parse(x.ID)).ToList();
            var version = Conds.Where(x => x.objectType == ObjectTypeEnum.Version).Select(x => int.Parse(x.ID)).ToList();




            EnumViewModel enumViewModel = new EnumViewModel();

            if (SelectedObjectType == ObjectTypeEnum.person)
            {
                Res = Query.GroupBy(x => new
                {
                    Person_ID = x.PersonGH_Tbl.Person_ID,
                    Person_Name = x.PersonGH_Tbl.Person_Tbl.Person_Name,
                    Person_Family = x.PersonGH_Tbl.Person_Tbl.Person_Family
                }).Select(x => new PersonGHMororClass
                {
                    Person_ID = x.Key.Person_ID,
                    PersonName = x.Key.Person_Name + " " + x.Key.Person_Family,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked = PersonIDs.Contains(x.Key.Person_ID)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x.PersonName).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.City)
            {
                Res = Query.GroupBy(x => new
                {
                    City_ID = x.PersonGH_Tbl.Markaz_Tbl.Bakhsh_Tbl.City_ID,
                    City_Name = x.PersonGH_Tbl.Markaz_Tbl.Bakhsh_Tbl.City_Tbl.City_Name,
                }).Select(x => new PersonGHMororClass
                {
                    City_ID = x.Key.City_ID,
                    CityName = x.Key.City_Name,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked = CityIDs.Contains(x.Key.City_ID)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Year)
            {
                Res = Query.GroupBy(x => new
                {
                    Year=x.PersonGH_Tbl.Year_Year,
                }).Select(x => new PersonGHMororClass
                {
                    Year=x.Key.Year,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked = year.Contains(x.Key.Year)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Month)
            {
                Res = Query.GroupBy(x => new
                {
                    Month = x.PersonGH_Tbl.Month,
                    //MonthName = enumViewModel.GetDisplayName(typeof(MonthEnum), x.PersonGH_Tbl.Month),
                }).ToList().Select(x => new PersonGHMororClass
                {
                    Month = x.Key.Month,
                    MonthName = enumViewModel.GetDisplayName(typeof(MonthEnum), x.Key.Month),
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked = month.Contains((int)x.Key.Month)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Version)
            {
                Res = Query.GroupBy(x => new
                {
                    Version=x.PersonGH_Tbl.VersionEnum,
                    
                }).ToList().Select(x => new PersonGHMororClass
                {
                    Version = x.Key.Version,
                    VersionName = enumViewModel.GetDisplayName(typeof(VersionEnum), x.Key.Version),
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked = version.Contains((int)x.Key.Version)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Markaz)
            {
                Res = Query.GroupBy(x => new
                {
                    Markaz_ID = x.PersonGH_Tbl.Markaz_ID,
                    MarkazName= x.PersonGH_Tbl.Markaz_Tbl.Markaz_Name,
                }).Select(x => new PersonGHMororClass
                {
                    Markaz_ID=x.Key.Markaz_ID,
                    MarkazName= x.Key.MarkazName,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked= MarkazIDs.Contains(x.Key.Markaz_ID)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.PersonType)
            {
                Res = Query.GroupBy(x => new
                {
                    PersonType=x.PersonGH_Tbl.PersonType,

                }).ToList().Select(x => new PersonGHMororClass
                {
                    PersonType =x.Key.PersonType,
                    PersonTypeName= enumViewModel.GetDisplayName(typeof(PersonTypeEnum), x.Key.PersonType),
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked=PersonTypes.Contains((int)x.Key.PersonType)
                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.PersonTypeGroup)
            {


                Res = Query.GroupBy(x => new
                {
                    PersonType = x.PersonGH_Tbl.PersonType,
                }).ToList().Select(x => new
                {
                    PersonTypeGroup = PersonTypeEnumClass.GetPersonTypeGroupCode(x.Key.PersonType),
                    price = x.Sum(y => y.PersonGHAmel_Value ?? 0)



                }).GroupBy(x => x.PersonTypeGroup).Select(x => new PersonGHMororClass
                {
                    PersonTypeGroup = x.Key,
                    PersonTypeGroupName = enumViewModel.GetDisplayName(typeof(PersonTypeGroupEnum), x.Key),
                    Price = x.Sum(y => y.price),
                    ischecked = persontypegroup.Contains((int)x.Key)

                }).ToList();

                if (isSortAsce == false) Res = Res.OrderByDescending(x => x).ToList();

                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();


                //PersonTypeEnumClass.GetPersonTypeCode(x.Key.PersonType)
            }
            if (SelectedObjectType == ObjectTypeEnum.Amel)
            {
                
                Res = Query.GroupBy(x => new
                {
                    AmelEnum = x.Amel,
                }).ToList().Select(x => new PersonGHMororClass
                {
                    AmelEnum = x.Key.AmelEnum,
                    AmelEnumName = enumViewModel.GetDisplayName(typeof(AmelEnum), x.Key.AmelEnum),
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0),
                    ischecked= amelen.Contains((int)x.Key.AmelEnum)
                }).ToList();
                if (isSortAsce == false) Res = Res.OrderByDescending(x => x.AmelEnumName).ToList();
                PageNumber = PageNumber ?? 1;
                PageSize = PageSize ?? 10;

                int SkipRecordCount = (PageNumber.Value - 1) * PageSize.Value;

                resultClass.RecordEffected = Res.Count();


                Res = Res.Skip(SkipRecordCount).Take(PageSize.Value).ToList();
            }
           
            resultClass.Result = Res;

            resultClass.SetDefualtSuccessSystem();

            return resultClass;
        }

    }

    
}


++++++++++++++++++++++++++++++
using Application.Classes;
using Application.ViewModels.Markaz;
using Application.ViewModels.PersonGH;
using DataLayer.Classes;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Application.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class PersonGHMororController : ControllerBase
    {
        private readonly ILogger<PersonGHMororController> _logger;

        public PersonGHMororController(ILogger<PersonGHMororController> logger)
        {
            _logger = logger;
        }

        [HttpPost, Route("GetList")]
        public ResultClass<List<PersonGHMororViewModel.PersonGHMororClass>> GetList(PersonGHMororViewModel VM)
        {

            try
            {
                var user = VM.GetList();
                return user;

            }
            catch (Exception Ex)
            {
                ResultClass<List<PersonGHMororViewModel.PersonGHMororClass>> resultClass = new ResultClass<List<PersonGHMororViewModel.PersonGHMororClass>>();
                resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

                return resultClass;
            }
        }
    }


}



