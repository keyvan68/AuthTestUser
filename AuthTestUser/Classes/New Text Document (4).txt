using System.Collections.Generic;
using Application.Classes;
using Application.ViewModels.Enumv;
using DataLayer.Repository;
using DomainClasses.Context;
using DomainClasses.Enums;

namespace Application.ViewModels.PersonGH
{


    public class PersonGHMororViewModel
    {
        public enum ObjectTypeEnum
        {
            person = 1,
            Year = 2,
            Month = 3,
            Version = 4,
            City = 5,
            Markaz = 6,
            PersonType = 7,
            PersonTypeGroup = 8,
            Amel = 9
        }

        public class PersonGHClass
        {
            public Guid? PersonGH_ID { get; set; }
            public Guid? Person_ID { get; set; }

            public string PersonName { get; set; }

            public int? Year { get; set; }

            public MonthEnum? Month { get; set; }

            public string MonthName { get; set; }

            public Guid? City_ID { get; set; }

            public string CityName { get; set; }

            public Guid? Markaz_ID { get; set; }

            public string MarkazName { get; set; }

            public PersonTypeEnum? PersonType { get; set; }

            public string PersonTypeName { get; set; }

            public PersonTypeGroupEnum? PersonTypeGroup { get; set; }

            public string PersonTypeGroupName { get; set; }

            public VersionEnum Version { get; set; }
            public string VersionName { get; set; }

            public AmelEnum AmelEnum { get; set; }

            public string AmelEnumName { get; set; }

            public decimal? Price { get; set; }

            public int? Count { get; set; }

            public Boolean ischecked { get; set; }

        }

        public class CondClass
        {
            public string ID { get; set; }

            public ObjectTypeEnum objectType { get; set; }
        }

        public List<CondClass> Conds { get; set; }

        public ObjectTypeEnum SelectedObjectType { get; set; }

        public PaymentTypeEnum PaymentType { get; set; }

        public PersonGHMororViewModel()
        {
            Conds = new List<CondClass>();
        }

        public ResultClass<List<PersonGHClass>> GetList()
        {
            ResultClass<List<PersonGHClass>> resultClass = new ResultClass<List<PersonGHClass>>();
            resultClass.Result = new List<PersonGHClass>();

            List<PersonGHClass> Res = new List<PersonGHClass>();

            ApplicationDbContext applicationDbContext = new ApplicationDbContext();


            PersonGHAmelRepository personGHAmelRepository = new PersonGHAmelRepository(applicationDbContext);
            var Query = personGHAmelRepository.GetAll().Where(x => x.PaymentType == PaymentType && x.PersonGHAmel_Value != null);

            var PersonIDs = Conds.Where(x => x.objectType == ObjectTypeEnum.person).Select(x => Guid.Parse(x.ID)).ToList();
            var PersonTypes = Conds.Where(x => x.objectType == ObjectTypeEnum.PersonType).Select(x => int.Parse(x.ID)).ToList();
            EnumViewModel enumViewModel = new EnumViewModel();

            if (SelectedObjectType == ObjectTypeEnum.person)
            {
                Res = Query.GroupBy(x => new
                {
                    Person_ID = x.PersonGH_Tbl.Person_ID,
                    Person_Name = x.PersonGH_Tbl.Person_Tbl.Person_Name,
                    Person_Family = x.PersonGH_Tbl.Person_Tbl.Person_Family
                }).Select(x => new PersonGHClass
                {
                    Person_ID = x.Key.Person_ID,
                    PersonName = x.Key.Person_Name + " " + x.Key.Person_Family,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.City)
            {
                Res = Query.GroupBy(x => new
                {
                    City_ID = x.PersonGH_Tbl.Markaz_Tbl.Bakhsh_Tbl.City_ID,
                    City_Name = x.PersonGH_Tbl.Markaz_Tbl.Bakhsh_Tbl.City_Tbl.City_Name,
                }).Select(x => new PersonGHClass
                {
                    City_ID = x.Key.City_ID,
                    CityName = x.Key.City_Name,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Year)
            {
                Res = Query.GroupBy(x => new
                {
                    Year=x.PersonGH_Tbl.Year_Year,
                }).Select(x => new PersonGHClass
                {
                    Year=x.Key.Year,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Month)
            {
                Res = Query.GroupBy(x => new
                {
                    Month=x.PersonGH_Tbl.Month,
                    MonthName= enumViewModel.GetDisplayName(typeof(MonthEnum),x.PersonGH_Tbl.Month),
                }).Select(x => new PersonGHClass
                {
                    Month=x.Key.Month,
                    MonthName =x.Key.MonthName,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Version)
            {
                Res = Query.GroupBy(x => new
                {
                    Version=x.PersonGH_Tbl.VersionEnum,
                    VersionName= enumViewModel.GetDisplayName(typeof(VersionEnum), x.PersonGH_Tbl.VersionEnum),
                    
                }).Select(x => new PersonGHClass
                {
                    Version = x.Key.Version,
                    VersionName = x.Key.VersionName,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Markaz)
            {
                Res = Query.GroupBy(x => new
                {
                    Markaz_ID = x.PersonGH_Tbl.Markaz_ID,
                    MarkazName= x.PersonGH_Tbl.Markaz_Tbl.Markaz_Name,
                }).Select(x => new PersonGHClass
                {
                    Markaz_ID=x.Key.Markaz_ID,
                    MarkazName= x.Key.MarkazName,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.PersonType)
            {
                Res = Query.GroupBy(x => new
                {
                    PersonType=x.PersonGH_Tbl.PersonType,
                    PersonTypeName = enumViewModel.GetDisplayName(typeof(PersonTypeEnum), x.PersonGH_Tbl.PersonType),

                }).Select(x => new PersonGHClass
                {
                    PersonType =x.Key.PersonType,
                    PersonTypeName=x.Key.PersonTypeName,
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.PersonTypeGroup)
            {
                
                
                Res = Query.GroupBy(x => new
                {
                    PersonTypeGroup = x.PersonGHAmel_Value,
                    PersonTypeName = enumViewModel.GetDisplayName(typeof(PersonTypeGroupEnum), x.PersonGH_Tbl.PersonType),

                }).Select(x => new PersonGHClass
                {
                    
                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }
            if (SelectedObjectType == ObjectTypeEnum.Amel)
            {
                
                Res = Query.GroupBy(x => new
                {
                    PersonType = x.PersonGH_Tbl.PersonType,
                    //
                    //AmelEnumName = enumViewModel.GetDisplayName(typeof(AmelEnum), x.PersonGH_Tbl.PersonGHAmel_Tbl),
                }).Select(x => new PersonGHClass
                {


                    Price = x.Sum(y => y.PersonGHAmel_Value ?? 0)
                }).ToList();
            }

            resultClass.Result = Res;

            resultClass.SetDefualtSuccessSystem();

            return resultClass;
        }

    }

    
}


==============================

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DomainClasses.Enums
{
    public enum PersonTypeEnum
    {
        [Display(Name = "پزشک")]
        Dr = 1,
        [Display(Name = "ماما کاردان")]
        MamaKardan = 2,
        [Display(Name = "ماما کارشناس")]
        MamaKarshenas = 3,
        [Display(Name = "دندانپزشک")]
        DandanPezeshk = 4,
        [Display(Name = "بهداشتکار دهان و دندان")]
        Behdashkar = 5,
        [Display(Name = "سایر حقوق بگیران")]
        Sayer = 6,
        [Display(Name = "پاراکلینیک کاردان")]
        ParaClinicKardan = 7,
        [Display(Name = "پاراکلینیک کارشناس")]
        ParaClinicKarshenas = 8,
        [Display(Name = "دستیار دندانپزشکی")]
        DastyarDandan = 9,
        [Display(Name = "پزشک متخصص")]
        DrMotakhases = 10
    }
}


-------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DomainClasses.Enums
{
    public enum PersonTypeGroupEnum
    {
        [Display(Name = "ماما (کاردان و کارشناس)")]
        Mama = 1,
        [Display(Name = "پزشک")]
        Dr = 2,
        [Display(Name = "دندانپزشک / بهداشتکار / دستیار")]
        DandanPezeshk = 3,
        [Display(Name = "سایر حقوق بگیران")]
        Sayer = 4
    }


    public static class PersonTypeGroupEnumClass
    {
        public static List<Enum> GetPersonTypeCode(PersonTypeGroupEnum personTypeGroupEnum)
        {
            List<Enum> enums = new List<Enum>();
            if (personTypeGroupEnum == PersonTypeGroupEnum.Mama)
            {
                enums.Add(PersonTypeEnum.MamaKardan);
                enums.Add(PersonTypeEnum.MamaKarshenas);
            }

            if (personTypeGroupEnum == PersonTypeGroupEnum.Dr)
            {
                enums.Add(PersonTypeEnum.Dr);
                enums.Add(PersonTypeEnum.DrMotakhases);
            }
            if (personTypeGroupEnum == PersonTypeGroupEnum.DandanPezeshk)
            {
                enums.Add(PersonTypeEnum.DastyarDandan);
                enums.Add(PersonTypeEnum.DandanPezeshk);
                enums.Add(PersonTypeEnum.Behdashkar);
            }
            if (personTypeGroupEnum == PersonTypeGroupEnum.Sayer)
            {
                enums.Add(PersonTypeEnum.Sayer);
                enums.Add(PersonTypeEnum.ParaClinicKardan);
                enums.Add(PersonTypeEnum.ParaClinicKarshenas);

            }





            return enums;
        }

    }
}
-------------



using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DomainClasses.Enums
{
    public enum AmelEnum
    {
        [Display(Name = "کارکرد ")]
        Karkard = 1,
        [Display(Name = "حقوق ثابت پرداختی")]
        HoghoghSabet = 2,
        [Display(Name = "جمعیت")]
        Jameiat = 3,
        [Display(Name = "سابقه در این مرکز")]
        SabeghehDarMarkaz = 4,
        [Display(Name = "سابقه در این شهر")]
        SabeghehDarShar = 5,
        [Display(Name = "سابقه در این دانشگاه")]
        SabeghehDarDaneshgah = 6,
        [Display(Name = "سابقه در کشور")]
        SabeghehDarKeshvar = 7,
        [Display(Name = "تعداد بیتوته موظف")]
        TedadBitotehMovzaf = 8,
        [Display(Name = "دم حضور بیتوته در روزهای عادی")]
        AdamHozorDarBitoteh = 9,
        [Display(Name = "تعداد غیبت")]
        TedadGhaibat = 10,
        [Display(Name = "مرخصی استعلاجی")]
        MorakhasiEstelaji = 11,
        [Display(Name = "درصد مسئولیت")]
        DarsadMasoliat = 12,
        [Display(Name = "درصد افزایش ویژه")]
        DarsadAfzayehVijeh = 13,
        [Display(Name = "درصد دارویاری")]
        DarsadDaroyari = 14,
        [Display(Name = "درصد خدمات پرستاری")]
        DarsadKhadamatParastari = 15,
        [Display(Name = "وضعیت توسعه یافتگی")]
        TosehYaftegiState = 16,
        [Display(Name = "شبانه روزی می باشد")]
        ShabanehRoziState = 17,
        [Display(Name = "تعداد پزشک")]
        TedadPezeshk = 18,
        [Display(Name = "وضعیت اقماری")]
        AghmariState = 19,
        [Display(Name = "درصد پایش")]
        DarsadPayeh = 20,
        [Display(Name = "ضریب حضور")]
        ZaribHozor = 21,
        [Display(Name = "ضریب عملکرد")]
        ZaribAmlakard = 22,
        [Display(Name = "مبلغ جانبازی")]
        JonbaziPrice = 23,
        [Display(Name = "منطقه آزاد")]
        ManteghehAzadState = 24,
        [Display(Name = "جانشین")]
        JaneshinState = 25,
        [Display(Name = "معین می باشد")]
        MoeanState = 26,
        [Display(Name = "مبلغ بدهکاری / بستانکاری از قبل")]
        BebBestPrice = 27,
        [Display(Name = "عدم حضور بیتوته در روزهای تعطیل")]
        AdamHozorBitotehDarRozhaiTatil = 28,
        [Display(Name = "تعداد روز حضور")]
        TedadRoozHozor = 29,
        [Display(Name = "تعداد روز تعطیل")]
        TedadRoozTatil = 30,
        [Display(Name = "عدم همکاری")]
        AdamHamkariState = 31,
        [Display(Name = "دوره پزشک خانواده")]
        DorehPezeshKhanevadeh = 32,
        [Display(Name = "وضعیت شیفت")]
        ShiftState = 33,
        [Display(Name ="جانباز")]
        JonbazState = 34,
        [Display(Name ="جایگزین")]
        JoygozinState = 35, 
        [Display(Name = "مدرک پزشک")]
        MadrakPezeskState = 36,
        [Display(Name = "پرداخت شده")]
        PaymentState = 37,
        [Display(Name = "تعداد روز عملکرد")]
        TedadRoozAmalkard = 38,
        [Display(Name = "فوق العاده جانبازی")]
        FoghladeJonbaziState =39,
        [Display(Name ="در شهرستان")]
        DarShahrestan=40,
        [Display(Name ="سایر مبلغ خدمات")]
        SayerMablaghKhadamat=41,
        [Display(Name = "تعداد بازدید خانه بهداشت")]
        BazdidKhanehBeshdashtCount =42,
        [Display(Name = "تعداد بازدید خانه بهداشت")]
        BazdidRostaiAghmariCount = 43,
        [Display(Name = "تعداد بازدید خانه بهداشت")]
        BazdidRostaiSayaeriCount = 44,
        [Display(Name = "تعداد بازدید خانه بهداشت")]
        BazdidRostaiMostaghimCount = 45,


        [Display(Name = "سهم جمعیت")]
        JameiatPrice = 46,
        [Display(Name = " ماندگاری")]
        MandegariConst = 47,
        [Display(Name = "سهم ماندگاری ")]
        MandegariPrice = 48,
        [Display(Name = "محرومیت")]
        MahromiatConst = 49,
        [Display(Name = "سهم محرومیت ")]
        MahromiatPrice = 50,
        [Display(Name = "پراکندگی")]
        ParakandegiConst = 51,
        [Display(Name = "سهم پراکندگی")]
        ParakandegiPrice = 52,
        [Display(Name = "بیتوته")]
        BeitoteConst = 53,
        [Display(Name = "سهم بیتوته")]
        BeitotePriceConst = 54,
        [Display(Name = "تک پزشک")]
        TakPezeshkConst = 55,
        [Display(Name = "دو پزشک")]
        DoPezeshkConst = 56,
        [Display(Name = "سه پزشک")]
        SePezeshkeConst = 57,

        [Display(Name = "جمعیت")]
        JameiatConstPrice = 58,

        [Display(Name = "مراکز معین / تجمیعی")]
        MarkazMoenConstPrice = 59,

        [Display(Name = "شبانه روزی")]
        DayAndNightConstPrice = 60,
        [Display(Name = "هر کیلومتر ابی و  خاکی پزشک")]
        KilometrAbiPezesk = 61,
        [Display(Name = "هر کیلومتر اسفالت پزشک")]
        KilometrAsfPezesk = 62,


        [Display(Name = "جمع کل")]
        TotalPrice = 63,


        [Display(Name = "مالیات کل")]
        TotalTaxPrice = 64,

    }

    public static class AmelEnumClass
    {
        //public static List<Enum> GetUserEnterAmel()
        //{
        //    List<Enum> list = new List<Enum>();
        //    list.Add(AmelEnum.Karkard);
        //    list.Add(AmelEnum.HoghoghSabet);
        //    list.Add(AmelEnum.SabeghehDarMarkaz);
        //    list.Add(AmelEnum.SabeghehDarShar);
        //    list.Add(AmelEnum.SabeghehDarDaneshgah);
        //    list.Add(AmelEnum.SabeghehDarKeshvar);


        //    return list;

        //}

        //public static List<Enum> GetCalcdAmel()
        //{
        //    List<Enum> list = new List<Enum>();
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.MandegariPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
        //    list.Add(AmelEnum.JameiatPrice);
            


        //    return list;

        //}

        public static List<Enum> GetConstAmel()
        {
            List<Enum> list = new List<Enum>();
            list.Add(AmelEnum.MandegariConst);
            list.Add(AmelEnum.MahromiatConst);
            list.Add(AmelEnum.ParakandegiConst);
            list.Add(AmelEnum.BeitoteConst);
            list.Add(AmelEnum.TakPezeshkConst);
            list.Add(AmelEnum.DoPezeshkConst);
            list.Add(AmelEnum.SePezeshkeConst);
            list.Add(AmelEnum.JameiatConstPrice);
            list.Add(AmelEnum.MarkazMoenConstPrice);
            list.Add(AmelEnum.DayAndNightConstPrice);
            list.Add(AmelEnum.KilometrAbiPezesk);
            list.Add(AmelEnum.KilometrAsfPezesk);




            return list;

        }



    }

}



**********************************

System.InvalidOperationException: 'The LINQ expression 'DbSet<PersonGHAmel_tbl>()
    .Where(p => (int)p.PaymentType == (int)__PaymentType_0 && p.PersonGHAmel_Value != null)
    .Join(
        inner: DbSet<PersonGH_tbl>(), 
        outerKeySelector: p => EF.Property<Guid?>(p, "PersonGH_ID"), 
        innerKeySelector: p0 => EF.Property<Guid?>(p0, "PersonGH_ID"), 
        resultSelector: (o, i) => new TransparentIdentifier<PersonGHAmel_tbl, PersonGH_tbl>(
            Outer = o, 
            Inner = i
        ))
    .GroupBy(p => new { 
        Month = p.Inner.Month, 
        MonthName = __enumViewModel_1.GetDisplayName(
            EnumIns: (Type)DomainClasses.Enums.MonthEnum, 
            Value: (object)p.Inner.Month)
     })' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.'


     This exception was originally thrown at this call stack:
    [External Code]
    Application.ViewModels.PersonGH.PersonGHMororViewModel.GetList() in PersonGHMororViewModel.cs
    Application.Controllers.PersonGHMororController.GetList(Application.ViewModels.PersonGH.PersonGHMororViewModel) in PersonGHMororController.cs