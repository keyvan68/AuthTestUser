اگر از JWT استفاده نمی‌کنید و تنها می‌خواهید با استفاده از نقش‌های Identity کنترل دسترسی به اکشن‌های کنترلر UserController را مدیریت کنید، تنظیماتی که در پیشنهاد قبلی آوردم را انجام دهید. به عبارت دقیق‌تر، از تنظیمات Identity و مجوز دهی به صورت زیر استفاده کنید:

ابتدا در فایل Startup.cs، متد ConfigureServices را به شکل زیر تنظیم کنید:
csharp
Copy code
public void ConfigureServices(IServiceCollection services)
{
    // ...

    // افزودن سیستم احراز هویت
    services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;
        options.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;
    });

    // افزودن سیستم مجوز دهی
    services.AddAuthorization(options =>
    {
        options.AddPolicy("UserPolicy", policy =>
        {
            policy.RequireAuthenticatedUser();
            policy.RequireRole("User");
        });
    });

    // ...
}
در متد Configure فایل Startup.cs، از کد زیر برای اعمال سیاست مجوز "UserPolicy" برای کل کنترلر UserController استفاده کنید:
csharp
Copy code
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    // ...

    app.UseRouting();

    // اعمال میان‌افزار احراز هویت و مجوز دهی
    app.UseAuthentication();
    app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers().RequireAuthorization("UserPolicy");
    });

    // ...
}
با این تنظیمات، تنها کاربرانی که وارد شده‌اند و نقش "User" را دارند، به اکشن‌های کنترلر UserController دسترسی دارند. در غیر اینصورت، دسترسی به این اکشن‌ها به صورت اتوماتیک محدود خواهد شد و نیازی به JWT یا مکانیزم‌های دیگر نیست.






 مشکل این است که x.City_Tbls مقدار null را برمی‌گرداند و به خطا می‌خورید، باید ابتدا اطمینان حاصل کنید که این خصوصیت به درستی بارگذاری شده باشد. به نظر می‌رسد که این خصوصیت به صورت تاخیری (lazy-loading) بارگذاری می‌شود و اگر اطمینان حاصل نشود که مقداری دارد، خطا به وجود می‌آید.

برای حل این مشکل می‌توانید از یکی از روش‌های زیر استفاده کنید:

Eager Loading: در ابتدا اطمینان حاصل کنید که City_Tbls به صورت eagerly (فوراً) بارگذاری شده باشد. برای این کار می‌توانید از روش Include در Entity Framework استفاده کنید. مثال:
csharp
Copy code
var Query = khanehBehdashtRepository.GetAll()
    .Include(x => x.City_Tbls)
    .Where(x => x.Markaz_ID == this.Markaz_ID);
Null Check: قبل از دسترسی به x.City_Tbls اطمینان حاصل کنید که مقدار آن null نیست. مثال:
csharp
Copy code
Rosta_Count = x.City_Tbls != null ? x.City_Tbls.Count() : 0
همچنین توجه داشته باشید که در مورد استفاده از eager loading، باید مطمئن شوید که مربوط به کد اصلی شما استفاده می‌شود و تأثیرات جانبی در دیگر قسمت‌های برنامه ایجاد نمی‌شود.




User
اگه این کد رو بزارم 
var Query = khanehBehdashtRepository.GetAll()
    .Include(x => x.City_Tbls)
    .Where(x => x.Markaz_ID == this.Markaz_ID);
دیگه از این query ها نمیتونم استفاده کنم 
 var Query = khanehBehdashtRepository.GetAll().Where(x => x.Markaz_ID == this.Markaz_ID);
ChatGPT
در صورتی که از Eager Loading استفاده کنید و با Include داده‌های مرتبط را بارگذاری کنید، به صورت پیش‌فرض داده‌های مرتبط در همان زمان بارگذاری می‌شوند و شما می‌توانید از آن‌ها در ادامه کار استفاده کنید. این به شما این امکان را می‌دهد که در یک کوئری مشترک از داده‌های اصلی و مرتبط استفاده کنید.

پس اگر Query را به صورت زیر تعریف کنید:

csharp
Copy code
var Query = khanehBehdashtRepository.GetAll()
    .Include(x => x.City_Tbls)
    .Where(x => x.Markaz_ID == this.Markaz_ID);
سپس می‌توانید از آن در ادامه کار استفاده کنید بدون نیاز به تعریف مجدد Query:

csharp
Copy code
var results = Query.ToList(); // یا هر عملیات دیگری که می‌خواهید روی این کوئری انجام دهید
بدین ترتیب، شما داده‌های مرتبط را همزمان با داده‌های اصلی بارگذاری می‌کنید و می‌توانید در کلیه کوئری‌های بعدی از آن استفاده کنید.


 //modelBuilder.Entity<ApplicationUser>().HasKey(u => u.Id);
            //modelBuilder.Entity<ApplicationRole>().HasKey(r => r.Id);
            //modelBuilder.Entity<IdentityUserRole<Guid>>().HasKey(r => new { r.UserId, r.RoleId });
            //modelBuilder.Entity<IdentityUserLogin<Guid>>().HasNoKey();
            //modelBuilder.Entity<IdentityUserToken<Guid>>().HasKey(t=> new {t.UserId,t.LoginProvider,t.Name});
            //modelBuilder.Entity<IdentityRole<Guid>>().HasData(
            //new IdentityRole<Guid>
            //{
            //        Id = Guid.NewGuid(),
            //        Name = "Admin",
            //        NormalizedName = "Admin".ToUpper()
            //    },
            //new IdentityRole<Guid>
            //{
            //    Id = Guid.NewGuid(),
            //    Name = "User",
            //    NormalizedName = "User".ToUpper()
            //}
            //);
            //modelBuilder.Entity<ApplicationUser>().ToTable("AspNetUsers"); 
            //modelBuilder.Entity<User>().ToTable("Users");
            //modelBuilder.Entity<ApplicationUser>()
            //  .HasOne(u => u.Users)
            //   .WithOne(user => user.ApplicationUser)
            //   .HasForeignKey<User>(user => user.ApplicationUserId);
            //modelBuilder.Entity<ApplicationUser>().ToTable("AspNetUsers"); // نام جدول مرتبط با ApplicationUser را تغییر می‌دهیم
            //modelBuilder.Entity<User>().ToTable("Users"); // نام جدول مرتبط با User را تغییر می‌دهیم

            //// تعریف رابطه بین ApplicationUser و User
            //modelBuilder.Entity<ApplicationUser>()
            //    .HasOne(u => u.User)
            //    .WithOne(user => user.ApplicationUser)
            //    .HasForeignKey<User>(user => user.ApplicationUserId);
            //The entity type 'IdentityUserToken<Guid>' requires a primary key to be defined.If you intended to use a keyless entity type, call 'HasNoKey' in 'OnModelCreating'.For more information on keyless entity types, see https://go.microsoft.com/fwlink/?linkid=2141943.




            var Applicationuser  = new ApplicationUser
                {
                    UserName = this.User_Code,
                    Users = new AuthTestUser.Entities.User()
                    {
                        User_ID = this.User_ID,
                        User_Code = this.User_Code,
                        User_Pass = this.User_Pass,
                        User_FullName = this.User_FullName,
                        User_Role = this.User_Role
                    }

                };
                var result =  _userManager.CreateAsync(Applicationuser, this.User_Pass);
                _userManager.AddToRoleAsync(Applicationuser, this.User_Role);
                https://stackoverflow.com/questions/52038054/web-api-core-returns-404-when-adding-authorize-attribute
                why when not authorize in web api bring bring back error 404 not error no authorize


-------------





                Responses
Curl

curl -X 'POST' \
  'http://localhost:8000/Auth/login' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  "user_Pass": "1",
  "user_Code": "1111"
}'
Request URL
http://localhost:8000/Auth/login
Server response
Code	Details
500
Undocumented
Error: Internal Server Error

Response body
Download
System.InvalidOperationException: Unable to resolve service for type 'Microsoft.AspNetCore.Identity.UserManager`1[DomainClasses.Entities.ApplicationUser]' while attempting to activate 'Application.Controllers.AuthController'.
   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)
   at lambda_method103(Closure, IServiceProvider, Object[])
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)

HEADERS
=======
Accept: */*
Connection: keep-alive
Host: localhost:8000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Content-Type: application/json
Origin: http://localhost:8000
Referer: http://localhost:8000/swagger/index.html
Content-Length: 45
sec-ch-ua: "Google Chrome";v="117", "Not;A=Brand";v="8", "Chromium";v="117"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Response headers
 access-control-allow-origin: * 
 content-type: text/plain; charset=utf-8 
 date: Sat,14 Oct 2023 09:01:13 GMT 
 server: Kestrel 
 transfer-encoding: chunked -----------

 program web api 
 using Application.Classes;
using DataLayer.Classes;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.HttpOverrides;
using System.Text;
using DomainClasses.Context;
using Microsoft.EntityFrameworkCore;
using DomainClasses.Entities;
using Microsoft.AspNetCore.Identity;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddCors();

#region Jwt

//var JwtSettingSection = builder.Configuration.GetSection("JWTSettings");
//builder.Services.Configure<JWTSettings>(JwtSettingSection);

//var jwtsetting = JwtSettingSection.Get<JWTSettings>();
//var key = Encoding.ASCII.GetBytes(jwtsetting.Secret);

//builder.Services.AddAuthentication(a =>
//{
//    a.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
//    a.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
//}).AddJwtBearer(option =>
//{
//    option.TokenValidationParameters = new TokenValidationParameters
//    {
//        IssuerSigningKey = new SymmetricSecurityKey(key),
//        ValidateIssuerSigningKey = true,
//        ValidIssuer = jwtsetting.Issure,
//        ValidateIssuer = true,
//        ValidAudience = jwtsetting.Audience,
//        ValidateAudience = true,
//        ValidateLifetime = true

//    };
//});

//builder.Services.AddDbContext<ApplicationDbContext>();


#endregion
var app = builder.Build();
app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor
});
// Configure the HTTP request pipeline.

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

//app.UseAuthentication();
//app.UseAuthorization();

//using var scope = app.Services.CreateScope();
//var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
//dbContext.Database.Migrate();

app.MapControllers();
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();


program userlayer


using AuthTestUser.Entities;
using DomainClasses.Context;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<ApplicationDbContext>();
builder.Services.AddCors();


builder.Services.AddIdentity<ApplicationUser, IdentityRole<Guid>>(
    options =>
    {

        options.Password.RequireLowercase = false;
        options.Password.RequireUppercase = false;
        options.Password.RequireDigit = false;
        options.Password.RequiredLength = 4;
        options.Password.RequireNonAlphanumeric = false;

    }
    )
.AddEntityFrameworkStores<ApplicationDbContext>();
var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
}

using var scope = app.Services.CreateScope();
var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
dbContext.Database.Migrate();



app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.MapFallbackToFile("index.html");
app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

app.Run();









controller

using Application.ViewModels.User;
using DomainClasses.Entities;
using DataLayer.Repository;
using DomainClasses.Context;
using DomainClasses.Entities;
using DomainClasses.IRepositories;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace Application.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly RoleManager<IdentityRole<Guid>> _roleManager;

        public AuthController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, RoleManager<IdentityRole<Guid>> roleManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
        }
        [HttpPost, Route("login")]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            var user = await _userManager.FindByNameAsync(model.User_Code);
            ApplicationDbContext applicationDbContext = new ApplicationDbContext();
            IUserRepository userRepository = new UserRepository(applicationDbContext);

            if (user != null)
            {
                var result = await _signInManager.PasswordSignInAsync(model.User_Code, model.User_Pass, false, false);
                if (result.Succeeded)
                {
                    // ورود موفقیت‌آمیز بود.

                    // بررسی نقش‌های کاربر
                    var roles = await _userManager.GetRolesAsync(user);

                    if (roles.Contains("Admin"))
                    {
                        // کاربر نقش Admin دارد، می‌توانید عملیات مرتبط با نقش Admin را انجام دهید.
                    }
                    else if (roles.Contains("User"))
                    {
                        // کاربر نقش User دارد، می‌توانید عملیات مرتبط با نقش User را انجام دهید.
                    }

                    return Ok(new { message = "ورود موفقیت‌آمیز بود." });
                }
            }
            // ورود ناموفق بود.
            return BadRequest(new { message = "ورود ناموفق بود." });
        }

        [HttpPost, Route("register")]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            var user = new ApplicationUser();
            //EnumViewModel enumView = new EnumViewModel()
            if (model.User_Role.Any())
            {
                user = new ApplicationUser
                {
                    Id = Guid.NewGuid(),
                    UserName = model.User_Code,
                    Users = new User_tbl()
                    {
                        User_ID = user.Id,
                        User_Code = model.User_Code,
                        User_Pass = model.User_Pass,
                        User_FullName = model.User_FullName,
                        User_Role = model.User_Role
                    }

                };
            }

            var result = await _userManager.CreateAsync(user, model.User_Pass);
            if (result.Succeeded)
            {
                //    // ثبت‌نام موفقیت‌آمیز بود.

                //    // ایجاد نقش مورد نظر (مثلاً "User") اگر وجود نداشت
                //    var roleExists = await _roleManager.RoleExistsAsync("User");
                //    if (!roleExists)
                //    {
                //        var newRole = new IdentityRole<Guid>("User");
                //        await _roleManager.CreateAsync(newRole);
                //    }

                // اختصاص نقش به کاربر
                await _userManager.AddToRoleAsync(user, model.User_Role);

                return Ok(new { message = "ثبت‌نام موفقیت‌آمیز بود." });
            }
            // خطا در ثبت‌ نام.
            return BadRequest(new { message = "خطا در ثبت‌ نام." });
        }
        //[HttpPost("Logout")]
        //public async Task<IActionResult> Logout()
        //{
        //    await _signInManager.SignOutAsync();
        //    return Ok(new { message = "‌خروج موفقیت‌آمیز بود." });
        //}
    }
}


// در Startup.cs در ConfigureServices، UserManager را به صورت زیر تنظیم کنید:
services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// در کنترلر Register یا در کلاسی مشابه
public class AccountController : Controller
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly SignInManager<ApplicationUser> _signInManager;

    public AccountController(
        UserManager<ApplicationUser> userManager,
        SignInManager<ApplicationUser> signInManager)
    {
        _userManager = userManager;
        _signInManager = signInManager;
    }

    [HttpPost]
    [AllowAnonymous]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Register(RegisterViewModel model)
    {
        if (ModelState.IsValid)
        {
            var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
            var result = await _userManager.CreateAsync(user, model.Password);
            if (result.Succeeded)
            {
                // در اینجا کد برای ایجاد کاربر در جدول User و منتقل کردن ApplicationUserId به آن قرار دهید
                var newUser = new User
                {
                    User_Code = model.Email,
                    User_Pass = model.Password,
                    // دیگر فیلدهای مورد نیاز را اضافه کنید
                    ApplicationUser = user // اتصال کاربر به جدول ApplicationUser
                };

                // ذخیره کاربر در جدول User
                // بر اساس رابطه‌ها می‌توانید دیگر اطلاعات کاربر را اضافه کنید

                _context.Users.Add(newUser);
                _context.SaveChanges();

                await _signInManager.SignInAsync(user, isPersistent: false);
                return RedirectToAction(nameof(HomeController.Index), "Home");
            }
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
            }
        }
        return View(model);
    }
}
********************************************************************************************
using Application;
using Application.Classes;
using Application.ViewModels.Access;
using Application.ViewModels.Markaz;
using Application.ViewModels.User;
using DataLayer.Classes;
using DomainClasses.Entities;
using DomainClasses.Enums;
using DomainClasses.IRepositories;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Diagnostics;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.Contracts;
using System.Net.WebSockets;
using System.Security.AccessControl;
using static Application.ViewModels.User.UserListCondViewModel;

namespace webapi.Controllers;

[ApiController]
[Route("[controller]")]
public class UserController : ControllerBase
{

    private readonly ILogger<UserController> _logger;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly UserManager<ApplicationUser> _userManager;


    public UserController(ILogger<UserController> logger, SignInManager<ApplicationUser> signInManager = null, UserManager<ApplicationUser> userManager = null)
    {
        _logger = logger;
        _signInManager = signInManager;
        _userManager = userManager;
    }



    [HttpGet, Route("initNew")]
    public ResultClass<UserViewModel> initNew()
    {

        //   Getff(typeof(EstekhdamiType));

        //var fff = FindV(typeof(EstekhdamiType), EstekhdamiType.Paimani);


        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var obj = UserViewModel.initNew();

            return obj;
        }
        catch (Exception Ex)
        {

            ResultClass<UserViewModel> resultClass = new Application.Classes.ResultClass<UserViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }
    }


    [HttpGet, Route("Edit")]
    public async Task<ResultClass<UserViewModel>> Edit(Guid id)
    {
        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var obj = UserViewModel.LoadData(id);

            return obj;
        }
        catch (Exception Ex)
        {
            ResultClass<UserViewModel> resultClass = new ResultClass<UserViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }

    }


    [HttpPost, Route("StoreData")]
    public async Task<ResultClass<Boolean>> StoreData(UserViewModel UserViewModel)
    {
        //// پیدا کردن کاربر موجود با استفاده از ID
        //var userAspNet = await _userManager.FindByIdAsync(UserViewModel.ApplicationUserId.ToString());

        //if (userAspNet != null)
        //{
        //    // اعمال تغییرات به ویژگی‌های کاربر
        //    userAspNet.UserName = UserViewModel.User_Code;
        //    userAspNet.PasswordHash = UserViewModel.User_Pass; // برای اعمال رمز عبور
        //    await _userManager.AddToRoleAsync(userAspNet, UserViewModel.User_Role);

        //    // ویرایش کاربر در جدول AspNetUsers
        //    var updateResult = await _userManager.UpdateAsync(userAspNet);


        try
        {
            ResultClass<Boolean> res = new ResultClass<bool>();

            if (ModelState.IsValid)
            {
                var userAspNet = new ApplicationUser
                {
                    UserName = UserViewModel.User_Code, // در نظر بگیرید که نیاز به ایمیل هم دارید
                };
                var result = await _userManager.CreateAsync(userAspNet, UserViewModel.User_Pass);
                if (result.Succeeded)
                {
                    await _userManager.AddToRoleAsync(userAspNet, UserViewModel.User_Role);
                    UserViewModel.User_ID = userAspNet.Id;
                    res = UserViewModel.StoreData();
                }
                else
                {
                    res.Errors.AddRange(result.Errors.Select(error => error.Description));
                }

                //var ipAddress = HttpContext.Connection.RemoteIpAddress.ToString();
            }
            else
            {
                var errors = ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                                    .Select(m => m.ErrorMessage).ToList();
                res.SetError(errors);

            }

            return res;


        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }



    }

    [HttpDelete, Route("Delete")]
    public async Task<ResultClass<Boolean>> Delete(Guid id)
    {
        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var user = UserViewModel.LoadData(id).Result;
            var res = UserViewModel.Delete(id);
            if (user != null)
            {
                // حذف کاربر از جدول User
                var userAspNet = await _userManager.FindByIdAsync(user.User_ID.ToString());
                if (userAspNet != null)
                {
                    await _userManager.DeleteAsync(userAspNet);
                }
            }

            return res;
        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }

    [HttpGet, Route("InitGetList")]
    public ResultClass<UserListCondViewModel> InitGetList()
    {
        try
        {
            ResultClass<UserListCondViewModel> resultClass = new ResultClass<UserListCondViewModel>();

            UserListCondViewModel UserViewModel = new UserListCondViewModel();
            UserViewModel.New();
            resultClass.SetDefualtSuccessSystem();

            return resultClass;


        }
        catch (Exception Ex)
        {
            ResultClass<UserListCondViewModel> resultClass = new ResultClass<UserListCondViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }

    }

    [HttpPost, Route("GetList")]
    public ResultClass<List<UserListCondViewModel.UserListClass>> GetList(UserListCondViewModel UserViewModel)
    {
        // 
        try
        {
            var user = UserViewModel.GetAll();
            return user;

        }
        catch (Exception Ex)
        {
            ResultClass<List<UserListCondViewModel.UserListClass>> resultClass = new ResultClass<List<UserListCondViewModel.UserListClass>>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }
    }

    [HttpPost, Route("Login")]
    public ResultClass<Boolean> Login(LoginViewModel VM)
    {
        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();
            Res.Result = VM.Login();
            if (Res.Result)
            {
                Res.SetDefualtSuccessSystem();
            }
            else
            {
                Res.Errors.Add("کاربری با این مشخصات پیدا نشد");
            }


            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }

    [HttpGet, Route("Logout")]
    public ResultClass<Boolean> Logout()
    {
        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();
            Res.Result = true;
            Res.SetDefualtSuccessSystem();

            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }



}



using Application.Classes;
using Azure.Core;
using DataLayer.Repository;
using DomainClasses.Context;
using DomainClasses.Entities;
using DomainClasses.Enums;
using DomainClasses.IRepositories;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Application.ViewModels.PersonGH.PersonGHV22ViewModel;
using static Application.ViewModels.User.UserListCondViewModel;

namespace Application.ViewModels.User
{
    public class UserViewModel
    {

        public class UserAccessClass
        {
            public int Access_ID { get; set; }
            [Display(Name = "نام دسترسی")]
            [Required(ErrorMessage = "لطفا {0} را وارد کنید")]
            public string Access_Name { get; set; }
            [Required]
            public Boolean isChecked { get; set; }


        }


        public class UserCityClass
        {
            public Guid City_ID { get; set; }
            [Display(Name = "نام شهر")]
            public string City_Name { get; set; }
            [Required]
            public Boolean isChecked { get; set; }

        }



        public Guid User_ID { get; set; }
        [Required(ErrorMessage = " کد کاربری اجبای است")]
        public string User_Code { get; set; }
        [Required(ErrorMessage = " رمز کاربری اجبای است")]
        public string User_Pass { get; set; }
        [Required(ErrorMessage = " نام کاربری اجبای است")]
        public string User_FullName { get; set; }
        [Required]
        public Guid Univercity_ID { get; set; }

        public string User_Role { get; set; }

        public List<UserAccessClass> UserAccess { get; set; }

        public List<UserCityClass> UserCity { get; set; }


        public UserViewModel()
        {
            UserAccess = new List<UserAccessClass>();
            UserCity = new List<UserCityClass>();
        }

        public ResultClass<UserViewModel> initNew()
        {


            ResultClass<UserViewModel> RC = new ResultClass<UserViewModel>();


            ApplicationDbContext applicationDbContext = new();
            IUserRepository userRepository = new UserRepository(applicationDbContext);
            IAccessRepository accessRepository = new AccessRepository(applicationDbContext);
            ICityRepository cityRepository = new CityRepository(applicationDbContext);

            RC.Result = new UserViewModel();
            RC.Result.User_ID = Guid.NewGuid();
            RC.Result.Univercity_ID = CurrentDataClass.GetCurrentUniversity();
            RC.Result.UserAccess = accessRepository.GetAll().Select(a => new UserAccessClass
            {
                Access_ID = a.Access_ID,
                Access_Name = a.Access_Name,
                isChecked = false

            }).ToList();

            var et = typeof(EstekhdamiTypeEnum);

            //  var dddd = userRepository.GetAll().Select(x => new { ff = et.GetField(x.estekhdamiType.ToString()).GetValue("display") });
            RC.Result.UserCity = cityRepository.GetAll().Select(a => new UserCityClass
            {
                City_ID = a.City_ID,
                City_Name = a.City_Name,
                isChecked = false


            }).ToList();


            return RC;
        }


        public ResultClass<bool> StoreData()
        {
            ResultClass<bool> RC = new ResultClass<bool>();


            ApplicationDbContext applicationDbContext = new();

            IUserRepository userRepository = new UserRepository(applicationDbContext);
            ILogRepository logRepository = new LogRepository(applicationDbContext);
            var user = userRepository.Find(this.User_ID);
            if (user == null)
            {
                user = new User_tbl();
                user.User_ID = this.User_ID;

                userRepository.Add(user);
                var Log = new Log_tbl();

                Log.Log_Info = "Add user .. !!!";
                Log.Log_IP = "127.0.0.1";
                logRepository.WriteLog(user.User_ID, Log.Log_IP, Log.Log_Info);


            }
            else
            {
                userRepository.Update(user);
            }
            user.Univercity_ID = CurrentDataClass.GetCurrentUniversity();
            user.User_FullName = this.User_FullName;
            user.User_Pass = this.User_Pass;
            user.User_Code = this.User_Code;
            user.User_Role = this.User_Role;

            UserAccessRepository userAccessRepository = new UserAccessRepository(applicationDbContext);

            foreach (var item in this.UserAccess)
            {
                var useracces = userAccessRepository.GetAll().Where(x => x.User_ID == user.User_ID && x.Access_ID == item.Access_ID).SingleOrDefault();

                if (item.isChecked == false)
                {
                    if (useracces != null) userAccessRepository.Remove(useracces);
                    continue;
                }

                if (useracces == null)
                {
                    useracces = new UserAccess_tbl();
                    useracces.UserAccess_ID = Guid.NewGuid();
                    useracces.User_ID = user.User_ID;
                    useracces.Access_ID = item.Access_ID;


                    userAccessRepository.Add(useracces);
                }


            }
            UserCityRepository userCityRepository = new UserCityRepository(applicationDbContext);
            foreach (var item in this.UserCity)
            {
                var usercity = userCityRepository.GetAll().Where(x => x.User_ID == user.User_ID && x.City_ID == item.City_ID).SingleOrDefault();
                if (item.isChecked == false)
                {
                    if (usercity != null)
                    {
                        userCityRepository.Remove(usercity);

                    }

                    continue;

                }
                if (usercity == null)
                {
                    usercity = new UserCity_tbl();
                    usercity.UserCity_ID = Guid.NewGuid();
                    usercity.User_ID = user.User_ID;
                    usercity.City_ID = item.City_ID;

                    userCityRepository.Add(usercity);
                }
            }

            if (RC.isSuccsed == false) return RC;


            int C = applicationDbContext.SaveChanges();
            if (C == 0)
            {
                RC.SetDefualtErrorSystem();
            }
            else
            {
                RC.SetDefualtSuccessSystem();
            }



            return RC;
        }


        public ResultClass<UserViewModel> LoadData(Guid id)
        {
            ResultClass<UserViewModel> RC = new ResultClass<UserViewModel>();
            ApplicationDbContext applicationDbContext = new();
            IUserRepository userRepository = new UserRepository(applicationDbContext);
            IAccessRepository accessRepository = new AccessRepository(applicationDbContext);
            IUserAccessRepository userAccessRepository = new UserAccessRepository(applicationDbContext);
            IUnivercityRepository univercityRepository = new UnivercityRepository(applicationDbContext);
            IUserCityRepository userCityRepository = new UserCityRepository(applicationDbContext);
            ICityRepository cityRepository = new CityRepository(applicationDbContext);


            var user = userRepository.Find(id);
            RC.Result = new UserViewModel
            {
                User_Code = user.User_Code,
                User_FullName = user.User_FullName,
                User_ID = user.User_ID,
                User_Pass = user.User_Pass,
                Univercity_ID = user.Univercity_ID

            };


            var userAccess_tbl = userAccessRepository.GetAll().Where(x => x.User_ID == id).ToList();
            var access_tbl = accessRepository.GetAll().ToList();


            RC.Result.UserAccess = (from Access in access_tbl
                                    join userAccess in userAccess_tbl on Access.Access_ID equals userAccess.Access_ID
                                    into UserDataAccess
                                    from UAC in UserDataAccess.DefaultIfEmpty()
                                    select new UserAccessClass
                                    {
                                        Access_ID = Access.Access_ID,
                                        Access_Name = Access.Access_Name,
                                        isChecked = UAC != null ? true : false
                                    }).ToList();

            var city_tbl = cityRepository.GetAll().ToList();
            var usercity_tbl = userCityRepository.GetAll().Where(x => x.User_ID == id).ToList();
            RC.Result.UserCity = (from City in city_tbl
                                  join UserCityT in usercity_tbl on City.City_ID equals UserCityT.City_ID
                                  into UserCity
                                  from UC in UserCity.DefaultIfEmpty()
                                  select new UserCityClass
                                  {
                                      City_ID = City.City_ID,
                                      City_Name = City.City_Name,
                                      isChecked = UC != null ? true : false
                                  }).ToList();

            return RC;
        }

        public ResultClass<bool> Delete(Guid id)
        {
            ResultClass<bool> RC = new ResultClass<bool>();
            ApplicationDbContext applicationDbContext = new();

            IUserRepository userRepository = new UserRepository(applicationDbContext);
            var user = userRepository.Find(id);
            if (user != null)
            {
                userRepository.Remove(id);
            }

            int C = applicationDbContext.SaveChanges();
            if (C == 0)
            {
                RC.SetDefualtErrorSystem();
            }
            else
            {
                RC.SetDefualtSuccessSystem();
            }

            return RC;
        }

    }
}
using DomainClasses.Entities;
using DomainClasses.Configurations;
using DomainClasses.Entities;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata;
using System.Text;
using System.Threading.Tasks;

namespace DomainClasses.Context
{
    public class ApplicationDbContext : IdentityDbContext<ApplicationUser, IdentityRole<Guid>, Guid>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

        public ApplicationDbContext()
        {

        }




        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Server=192.168.1.13\\MSSQLSERVER_IMP;Database=MPWDB;user=sa;password=2262;Encrypt=False;");
        }


        public DbSet<Person_tbl> Person_Tbl { get; set; }
        //public DbSet<ConstType_tbl> ConstType_Tbl { get; set; }
        //public DbSet<Const_tbl> Const_Tbl { get; set; }
        public DbSet<Access_tbl> Access_Tbl { get; set; }
        public DbSet<Bakhsh_tbl> Bakhsh_Tbl { get; set; }
        public DbSet<City_tbl> City_Tbl { get; set; }
        public DbSet<KarkardLock_tbl> KarkardLock_Tbl { get; set; }
        public DbSet<KJPrice_tbl> KJPrice_tbl { get; set; }
        public DbSet<Markaz_tbl> Markaz_Tbl { get; set; }
        public DbSet<PersonGH_tbl> PersonGH_Tbl { get; set; }
        public DbSet<PersonGHKJ_tbl> PersonGHKJ_Tbl { get; set; }
        public DbSet<PersonGHRosta_tbl> PersonGHRosta_Tbl { get; set; }
        public DbSet<Rosta_tbl> Rosta_Tbl { get; set; }
        public DbSet<Univercity_tbl> Univercity_Tbl { get; set; }
        public DbSet<User_tbl> User_Tbl { get; set; }
        public DbSet<YearMonth_tbl> YearMonth_Tbl { get; set; }
        public DbSet<Year_tbl> Year_Tbl { get; set; }
        public DbSet<Log_tbl> Log_Tbl { get; set; }
        public DbSet<Const_tbl> Const_tbl { get; set; }
        public DbSet<UserAccess_tbl> UserAccess_Tbl { get; set; }
        public DbSet<PersonGHBitoteh_tbl> PersonGHBitoteh_Tbl { get; set; }
        public DbSet<PersonGHPayment_tbl> PersonGHPayment_Tbl { get; set; }
        public DbSet<PersonGHAmel_tbl> PersonGHAmel_Tbl { get; set; }

        public DbSet<UserCity_tbl> UserCity_tbl { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AccessConfiguration());
            modelBuilder.ApplyConfiguration(new PersonGHBitotehConfiguration());
            modelBuilder.ApplyConfiguration(new RostaConfiguration());
            modelBuilder.ApplyConfiguration(new YearConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PersonGHConfiguration());
            modelBuilder.ApplyConfiguration(new UserCityConfiguration());

            SeedData.Initialize(modelBuilder);
            

            modelBuilder.Entity<ApplicationUser>(entity =>
            {

                entity.HasOne(a => a.Users).WithOne(b => b.ApplicationUser)
                .HasForeignKey<User_tbl>(b => b.User_ID).OnDelete(DeleteBehavior.Cascade);


            });
            modelBuilder.Entity<User_tbl>(entity =>
            {

                entity.HasMany(a => a.UserCity_Tbls).WithOne(b => b.User_tbl)
                .HasForeignKey(b => b.User_ID).OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(a => a.ApplicationUser).WithOne(b => b.Users)
                .OnDelete(DeleteBehavior.Cascade);
                //.HasForeignKey<User_tbl>(b => b.User_ID).OnDelete(DeleteBehavior.Cascade);


            });
        }


    }
}



using Application;
using Application.Classes;
using Application.ViewModels.Access;
using Application.ViewModels.Markaz;
using Application.ViewModels.User;
using DataLayer.Classes;
using DomainClasses.Entities;
using DomainClasses.Enums;
using DomainClasses.IRepositories;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Diagnostics;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.Contracts;
using System.Net.WebSockets;
using System.Security.AccessControl;
using static Application.ViewModels.User.UserListCondViewModel;

namespace webapi.Controllers;

[ApiController]
[Route("[controller]")]
public class UserController : ControllerBase
{

    private readonly ILogger<UserController> _logger;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly UserManager<ApplicationUser> _userManager;


    public UserController(ILogger<UserController> logger, SignInManager<ApplicationUser> signInManager = null, UserManager<ApplicationUser> userManager = null)
    {
        _logger = logger;
        _signInManager = signInManager;
        _userManager = userManager;
    }



    [HttpGet, Route("initNew")]
    public ResultClass<UserViewModel> initNew()
    {

        //   Getff(typeof(EstekhdamiType));

        //var fff = FindV(typeof(EstekhdamiType), EstekhdamiType.Paimani);


        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var obj = UserViewModel.initNew();

            return obj;
        }
        catch (Exception Ex)
        {

            ResultClass<UserViewModel> resultClass = new Application.Classes.ResultClass<UserViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }
    }


    [HttpGet, Route("Edit")]
    public async Task<ResultClass<UserViewModel>> Edit(Guid id)
    {
        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var obj = UserViewModel.LoadData(id);

            return obj;
        }
        catch (Exception Ex)
        {
            ResultClass<UserViewModel> resultClass = new ResultClass<UserViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }

    }


    [HttpPost, Route("StoreData")]
    public async Task<ResultClass<Boolean>> StoreData(UserViewModel UserViewModel)
    {
        
        try
        {
            ResultClass<Boolean> res = new ResultClass<bool>();

            if (ModelState.IsValid)
            {
                var userAspNet = new ApplicationUser
                {
                    UserName = UserViewModel.User_Code,
                };
                var result = await _userManager.CreateAsync(userAspNet, UserViewModel.User_Pass);
                if (result.Succeeded)
                {
                    await _userManager.AddToRoleAsync(userAspNet, UserViewModel.User_Role);
                    UserViewModel.User_ID = userAspNet.Id;
                    res = UserViewModel.StoreData();
                }
                else
                {
                    res.Errors.AddRange(result.Errors.Select(error => error.Description));
                }

                //var ipAddress = HttpContext.Connection.RemoteIpAddress.ToString();
            }
            else
            {
                var errors = ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                                    .Select(m => m.ErrorMessage).ToList();
                res.SetError(errors);

            }

            return res;


        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }



    }

    [HttpDelete, Route("Delete")]
    public async Task<ResultClass<Boolean>> Delete(Guid id)
    {
        try
        {
            UserViewModel UserViewModel = new UserViewModel();
            var user = UserViewModel.LoadData(id).Result;
            var res = UserViewModel.Delete(id);
            if (user != null)
            {
                // حذف کاربر از جدول User
                var userAspNet = await _userManager.FindByIdAsync(user.User_ID.ToString());
                if (userAspNet != null)
                {
                    await _userManager.DeleteAsync(userAspNet);
                }
            }

            return res;
        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }

    [HttpGet, Route("InitGetList")]
    public ResultClass<UserListCondViewModel> InitGetList()
    {
        try
        {
            ResultClass<UserListCondViewModel> resultClass = new ResultClass<UserListCondViewModel>();

            UserListCondViewModel UserViewModel = new UserListCondViewModel();
            UserViewModel.New();
            resultClass.SetDefualtSuccessSystem();

            return resultClass;


        }
        catch (Exception Ex)
        {
            ResultClass<UserListCondViewModel> resultClass = new ResultClass<UserListCondViewModel>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }

    }

    [HttpPost, Route("GetList")]
    public ResultClass<List<UserListCondViewModel.UserListClass>> GetList(UserListCondViewModel UserViewModel)
    {
        // 
        try
        {
            var user = UserViewModel.GetAll();
            return user;

        }
        catch (Exception Ex)
        {
            ResultClass<List<UserListCondViewModel.UserListClass>> resultClass = new ResultClass<List<UserListCondViewModel.UserListClass>>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }
    }

    [HttpPost, Route("Login")]
    public ResultClass<Boolean> Login(LoginViewModel VM)
    {
        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();
            Res.Result = VM.Login();
            if (Res.Result)
            {
                Res.SetDefualtSuccessSystem();
            }
            else
            {
                Res.Errors.Add("کاربری با این مشخصات پیدا نشد");
            }


            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }

    [HttpGet, Route("Logout")]
    public ResultClass<Boolean> Logout()
    {
        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();
            Res.Result = true;
            Res.SetDefualtSuccessSystem();

            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }



}


[HttpPost, Route("Login")]
    public ResultClass<Boolean> Login(LoginViewModel VM)
    {
        string returnUrl = "";

        try
        {
            ResultClass<Boolean> Res = new ResultClass<bool>();

            var user = VM.Login();

            Res.Result = user != null; 
            if (Res.Result)
            {
                var claims = new List<Claim>
                        {
                            new Claim(ClaimTypes.Name, user.User_ID.ToString()),
                            new Claim("FullUserName", user.User_FullName),
                            new Claim(ClaimTypes.Role, "Administrator"),
                        };

                var claimsIdentity = new ClaimsIdentity(
                    claims, CookieAuthenticationDefaults.AuthenticationScheme);

                var authProperties = new AuthenticationProperties
                {
                    //AllowRefresh = <bool>,
                    // Refreshing the authentication session should be allowed.

                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(60),
                    // The time at which the authentication ticket expires. A 
                    // value set here overrides the ExpireTimeSpan option of 
                    // CookieAuthenticationOptions set with AddCookie.

                    //IsPersistent = true,
                    // Whether the authentication session is persisted across 
                    // multiple requests. When used with cookies, controls
                    // whether the cookie's lifetime is absolute (matching the
                    // lifetime of the authentication ticket) or session-based.

                    //IssuedUtc = <DateTimeOffset>,
                    // The time at which the authentication ticket was issued.

                    RedirectUri = returnUrl
                    // The full path or absolute URI to be used as an http 
                    // redirect response value.
                };


                HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity),
                    authProperties);


                Res.SetDefualtSuccessSystem();
            }
            else
            {
                Res.Errors.Add("user not found");
            }


            return Res;

        }
        catch (Exception Ex)
        {
            ResultClass<Boolean> resultClass = new ResultClass<Boolean>();
            resultClass.Errors.Add(ExceptionHandlerClass.GetPersianMessage(Ex));

            return resultClass;
        }


    }